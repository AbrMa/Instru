CCS PCM C Compiler, Version 4.104, 5967               30-may.-21 16:52

               Filename: C:\Users\Abraham\Documents\GitHub\Instru\Práctica 3\prac3.lst

               ROM used: 1292 words (16%)
                         Largest free fragment is 2048
               RAM used: 21 (6%) at main() level
                         43 (12%) worst case
               Stack:    2 locations

*
0000:  MOVLW  04
0001:  MOVWF  0A
0002:  GOTO   44A
0003:  NOP
.................... #include <16f877a.h> // biblioteca del micro 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #device adc=10 //adc de 10 bits 
.................... #include <stdio.h> //input output c 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDIO 
.................... #define _STDIO 
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #define size_t unsigned int8 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <ctype.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _CTYPE 
.................... #define _CTYPE 
....................  
.................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
.................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
.................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isdigit(x)  isamong(x,"0123456789") 
.................... #define isspace(x)  ((x)==' ') 
.................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
.................... #define iscntrl(x)  ((x)<' ') 
.................... #define isprint(x)  ((x)>=' ') 
.................... #define isgraph(x)  ((x)>' ') 
.................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
....................  
.................... #endif 
....................  
....................  
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
*
045D:  BCF    03.5
045E:  CLRF   20
045F:  CLRF   21
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... char s[15]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
.................... #ifndef getc 
.................... #define getc getch 
.................... #define getchar getch 
.................... #define puts(s) {printf(s); putchar(13); putchar(10);} 
.................... #define putc putchar 
.................... #endif 
.................... /* maps error number to an error message. Writes a sequence of characters to 
.................... stderr stream thus: if s is not null then string pointed to by s follwed by 
.................... a colon (:) and a space and the appropriate error message returned by strerror 
.................... function with argument errno 
....................  
.................... Returns: no value 
.................... */ 
....................  
.................... #ifdef _ERRNO 
.................... void perror(char *s) 
.................... { 
....................   if(s) 
....................   fprintf(STDERR,"%s: ",s); 
....................   fprintf(STDERR,"%s\r\n",strerror(errno)); 
.................... } 
.................... #endif 
.................... #endif 
....................  
.................... #fuses XT, NOWDT, NOPROTECT 
.................... #use delay (clock = 4MHz) // XT = 4MHz 
*
000F:  MOVLW  2D
0010:  MOVWF  04
0011:  BCF    03.7
0012:  MOVF   00,W
0013:  BTFSC  03.2
0014:  GOTO   023
0015:  MOVLW  01
0016:  MOVWF  78
0017:  CLRF   77
0018:  DECFSZ 77,F
0019:  GOTO   018
001A:  DECFSZ 78,F
001B:  GOTO   017
001C:  MOVLW  4A
001D:  MOVWF  77
001E:  DECFSZ 77,F
001F:  GOTO   01E
0020:  GOTO   021
0021:  DECFSZ 00,F
0022:  GOTO   015
0023:  BCF    0A.3
0024:  BCF    0A.4
0025:  GOTO   478 (RETURN)
.................... #use rs232 (baud = 9600, parity = N, xmit = pin_c6, rcv = pin_c7, bits = 8 ) // configuración del puerto serial 
....................  
.................... void main () { 
*
044A:  CLRF   04
044B:  BCF    03.7
044C:  MOVLW  1F
044D:  ANDWF  03,F
044E:  MOVLW  19
044F:  BSF    03.5
0450:  MOVWF  19
0451:  MOVLW  A6
0452:  MOVWF  18
0453:  MOVLW  90
0454:  BCF    03.5
0455:  MOVWF  18
0456:  BSF    03.5
0457:  BSF    1F.0
0458:  BSF    1F.1
0459:  BSF    1F.2
045A:  BCF    1F.3
045B:  MOVLW  07
045C:  MOVWF  1C
....................    int16 LSB; 
....................    float voltaje, HS; 
....................     
....................    setup_adc_ports(all_analog); 
*
0460:  BSF    03.5
0461:  BCF    1F.0
0462:  BCF    1F.1
0463:  BCF    1F.2
0464:  BCF    1F.3
....................    setup_adc(ADC_CLOCK_internal); 
0465:  BCF    1F.6
0466:  BCF    03.5
0467:  BSF    1F.6
0468:  BSF    1F.7
0469:  BSF    03.5
046A:  BSF    1F.7
046B:  BCF    03.5
046C:  BSF    1F.0
....................     
....................    while (true) { 
....................       set_adc_channel(0); 
046D:  MOVLW  00
046E:  MOVWF  78
046F:  MOVF   1F,W
0470:  ANDLW  C7
0471:  IORWF  78,W
0472:  MOVWF  1F
....................       delay_ms(1000); 
0473:  MOVLW  04
0474:  MOVWF  2C
0475:  MOVLW  FA
0476:  MOVWF  2D
0477:  GOTO   00F
0478:  DECFSZ 2C,F
0479:  GOTO   475
....................       LSB = read_adc(); 
047A:  BSF    1F.2
047B:  BTFSC  1F.2
047C:  GOTO   47B
047D:  BSF    03.5
047E:  MOVF   1E,W
047F:  BCF    03.5
0480:  MOVWF  22
0481:  MOVF   1E,W
0482:  MOVWF  23
....................       voltaje = (LSB * 5.0) / 1023.0; 
0483:  MOVF   23,W
0484:  MOVWF  2D
0485:  MOVF   22,W
0486:  MOVWF  2C
0487:  GOTO   026
0488:  MOVF   7A,W
0489:  MOVWF  3C
048A:  MOVF   79,W
048B:  MOVWF  3B
048C:  MOVF   78,W
048D:  MOVWF  3A
048E:  MOVF   77,W
048F:  MOVWF  39
0490:  CLRF   40
0491:  CLRF   3F
0492:  MOVLW  20
0493:  MOVWF  3E
0494:  MOVLW  81
0495:  MOVWF  3D
0496:  CALL   045
0497:  MOVF   77,W
0498:  MOVWF  2C
0499:  MOVF   78,W
049A:  MOVWF  2D
049B:  MOVF   79,W
049C:  MOVWF  2E
049D:  MOVF   7A,W
049E:  MOVWF  2F
049F:  MOVWF  33
04A0:  MOVF   79,W
04A1:  MOVWF  32
04A2:  MOVF   78,W
04A3:  MOVWF  31
04A4:  MOVF   77,W
04A5:  MOVWF  30
04A6:  CLRF   37
04A7:  MOVLW  C0
04A8:  MOVWF  36
04A9:  MOVLW  7F
04AA:  MOVWF  35
04AB:  MOVLW  88
04AC:  MOVWF  34
04AD:  GOTO   0BA
04AE:  MOVF   7A,W
04AF:  MOVWF  27
04B0:  MOVF   79,W
04B1:  MOVWF  26
04B2:  MOVF   78,W
04B3:  MOVWF  25
04B4:  MOVF   77,W
04B5:  MOVWF  24
....................       HS = voltaje * (85.0/4.9) + 10; 
04B6:  MOVF   27,W
04B7:  MOVWF  3C
04B8:  MOVF   26,W
04B9:  MOVWF  3B
04BA:  MOVF   25,W
04BB:  MOVWF  3A
04BC:  MOVF   24,W
04BD:  MOVWF  39
04BE:  MOVLW  88
04BF:  MOVWF  40
04C0:  MOVLW  C6
04C1:  MOVWF  3F
04C2:  MOVLW  0A
04C3:  MOVWF  3E
04C4:  MOVLW  83
04C5:  MOVWF  3D
04C6:  CALL   045
04C7:  MOVF   77,W
04C8:  MOVWF  2C
04C9:  MOVF   78,W
04CA:  MOVWF  2D
04CB:  MOVF   79,W
04CC:  MOVWF  2E
04CD:  MOVF   7A,W
04CE:  MOVWF  2F
04CF:  BCF    03.1
04D0:  MOVF   7A,W
04D1:  MOVWF  33
04D2:  MOVF   79,W
04D3:  MOVWF  32
04D4:  MOVF   78,W
04D5:  MOVWF  31
04D6:  MOVF   77,W
04D7:  MOVWF  30
04D8:  CLRF   37
04D9:  CLRF   36
04DA:  MOVLW  20
04DB:  MOVWF  35
04DC:  MOVLW  82
04DD:  MOVWF  34
04DE:  GOTO   186
04DF:  MOVF   7A,W
04E0:  MOVWF  2B
04E1:  MOVF   79,W
04E2:  MOVWF  2A
04E3:  MOVF   78,W
04E4:  MOVWF  29
04E5:  MOVF   77,W
04E6:  MOVWF  28
....................       printf("Porciento HS %2.2f \r\n", HS); 
04E7:  MOVLW  04
04E8:  BSF    03.6
04E9:  MOVWF  0D
04EA:  MOVLW  00
04EB:  MOVWF  0F
04EC:  BCF    03.0
04ED:  MOVLW  0D
04EE:  BCF    03.6
04EF:  MOVWF  2C
04F0:  GOTO   2C9
04F1:  MOVLW  89
04F2:  MOVWF  04
04F3:  MOVF   2B,W
04F4:  MOVWF  2F
04F5:  MOVF   2A,W
04F6:  MOVWF  2E
04F7:  MOVF   29,W
04F8:  MOVWF  2D
04F9:  MOVF   28,W
04FA:  MOVWF  2C
04FB:  MOVLW  02
04FC:  MOVWF  30
04FD:  GOTO   35D
04FE:  MOVLW  20
04FF:  BTFSS  0C.4
0500:  GOTO   4FF
0501:  MOVWF  19
0502:  MOVLW  0D
0503:  BTFSS  0C.4
0504:  GOTO   503
0505:  MOVWF  19
0506:  MOVLW  0A
0507:  BTFSS  0C.4
0508:  GOTO   507
0509:  MOVWF  19
....................    } 
050A:  GOTO   46D
.................... } 
050B:  SLEEP

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT NODEBUG NOPROTECT BROWNOUT NOLVP NOCPD NOWRT
